[tasks.gen-doc]
command = "cargo"
args = ["doc"]

[tasks.rm-static-doc]
command = "rm"
args = ["-f", "target/doc/gitignore_template_generator/index.html"]

[tasks.doc]
run_task = [{ name = ["rm-static-doc", "gen-doc"] }]

# cargo
[tasks.fmt]
script = """
cargo +nightly fmt -- --unstable-features
"""

# git
[tasks.git-add-all]
command = "git"
args = ["add", "."]

[tasks.git-add-changelog]
command = "git"
args = ["add", "CHANGELOG.md"]

[tasks.git-commit-fmt]
command = "git"
args = ["commit", "-m", "style: reformat code with cargo fmt"]

[tasks.git-commit-changelog]
command = "git"
args = ["commit", "-m", "chore(changelog): update file"]

[tasks.git-push]
command = "git"
args = ["push"]

# front tasks
[tasks.fmt-commit]
dependencies = ["git-add-all", "git-commit-fmt", "git-push"]

[tasks.changelog-commit]
dependencies = ["git-add-changelog", "git-commit-changelog", "git-push"]

##############
# META TASKS #
##############

# [changelogs]
# - changelog

# [tests]
# - test
# - validate
# - validate-env

# [releases]
# - release
# - release-dryrun

[config]
skip_core_tasks = true

[env]
MAIN_CHANGELOG_FILE = "CHANGELOG.md"
SNAPSHOT_CHANGELOG_FILE = "CHANGELOG_SNAPSHOT.md"


################
# [changelogs] #
################
[tasks.generate-changelog]
description = "Generate changelogs for unreleased commits in CHANGELOG_SNAPSHOT.md"
install_crate = "git-cliff"
command = "git"
args = [
  "cliff",
  "--unreleased",
  "-o",
  "${SNAPSHOT_CHANGELOG_FILE}",
  "--verbose",
  "--workdir",
  ".",
  "--strip",
  "all",
]

[tasks.bump-changelog]
description = "Bump sCHANGELOG_SNAPSHOT.md into CHANGELOG.md"
condition = { files_exist = ["${SNAPSHOT_CHANGELOG_FILE}"] }
script = [
  "sed '/./,$!d' ${SNAPSHOT_CHANGELOG_FILE} | tac | sed '/./,$!d' | tac > tmp && mv tmp ${SNAPSHOT_CHANGELOG_FILE}",
  "sed -e \"/@Content/{r ${SNAPSHOT_CHANGELOG_FILE}\" -e 'd}' ${MAIN_CHANGELOG_FILE} > tmp && mv tmp ${MAIN_CHANGELOG_FILE}",
  "rm ${SNAPSHOT_CHANGELOG_FILE}",
]

[tasks.changelog] # META TASK
description = "Generate changelogs for unreleased commits in CHANGELOG.md"
dependencies = ["generate-changelog", "bump-changelog"]


###########
# [tests] #
###########
[tasks.test-unit]
description = "Run unit tests"
command = "cargo"
args = ["test", "--lib"]

[tasks.test-unit-local-templating]
description = "Run unit tests with local_templating feature enabled"
command = "cargo"
args = ["test", "--lib", "--features", "local_templating"]

[tasks.test-isolation]
description = "Run isolation tests"
command = "cargo"
args = ["test", "--test", "isolation_tests"]

[tasks.test-isolation-local-templating]
description = "Run isolation tests with local_templating feature enabled"
command = "cargo"
args = ["test", "--test", "isolation_tests", "--features", "local_templating"]

[tasks.test-integration]
description = "Run integration tests"
command = "cargo"
args = ["test", "--test", "integration_tests"]

[tasks.test-integration-local-templating]
description = "Run integration tests with local_templating feature enabled"
command = "cargo"
args = ["test", "--test", "integration_tests", "--features", "local_templating"]

[tasks.test] # META TASK
description = "Run unit, isolation and integration tests"
dependencies = [
  "test-unit",
  "test-unit-local-templating",
  "test-isolation",
  "test-isolation-local-templating",
  "test-integration",
  "test-integration-local-templating",
]

[tasks.lint]
description = "Lint codebase with clippy"
install_crate = { rustup_component_name = "clippy", binary = "cargo-clippy", test_arg = "--help" }
command = "cargo"
args = ["clippy", "--all-targets", "--all-features"]

[tasks.fmt-check]
description = "Check codebase format with rustfmt"
toolchain = "nightly"
install_crate = { rustup_component_name = "rustfmt", binary = "cargo-fmt", test_arg = "--help" }
command = "cargo"
args = ["fmt", "--check", "--", "--unstable-features"]

[tasks.validate] # META TASK
description = "Test, lint and check format of codebase"
dependencies = ["test", "lint", "fmt-check"]

[tasks.validate-env] # META TASK
description = "Test, lint and check format of codebase with GITIGNORE_TEMPLATE_GENERATOR_HOME env var set"
dependencies = ["test", "lint", "fmt-check"]
env = { GITIGNORE_TEMPLATE_GENERATOR_HOME = "/some/path" }


##############
# [releases] #
##############
[tasks.bump-trello-version]
description = "Update trello board name with content of .version file"
script = '''
new_version=$(cat .version)
new_name="gitignore-template-generator+${new_version}"
key=$(cat "$TRELLO_API_KEY")
token=$(cat "$TRELLO_API_TOKEN")
curl -o /dev/null -s -X PUT "https://api.trello.com/1/boards/FZLDdiLN?name=${new_name}&key=${key}&token=${token}"
echo "Trello board version bumped to ${new_version}"
'''

[tasks.rename-trello-cards]
description = "Update trello card names in Done column with content of .version file"
script = '''
old_version=$(cat .version)
key=$(cat "$TRELLO_API_KEY")
token=$(cat "$TRELLO_API_TOKEN")
curl -s "https://api.trello.com/1/lists/68027d1040324003560f3169/cards?key=${key}&token=${token}" | jq -c '.[] | {id, name}' |
while read -r card; do
  card_name=$(echo "${card}" | jq -r '.name')
  card_id=$(echo "${card}" | jq -r '.id')
  url_encoded_card_name=$(jq -rn --arg v "$card_name" '$v|@uri')
  new_name="${old_version}+-+${url_encoded_card_name}"
  curl -o /dev/null -s -X PUT "https://api.trello.com/1/cards/${card_id}?name=${new_name}&idList=68027e5026b59f970b733488&key=${key}&token=${token}"
  echo "Renamed card ${card_id} with version specifier"
done
'''

[tasks.archive-trello-cards]
description = "Move trello cards from Done to History column"
script = '''
key=$(cat "$TRELLO_API_KEY")
token=$(cat "$TRELLO_API_TOKEN")
card_ids=$(curl -s "https://api.trello.com/1/lists/68027d1040324003560f3169/cards?key=${key}&token=${token}" | jq -r '.[].id')
for card_id in $card_ids; do
  curl -o /dev/null -s -X PUT "https://api.trello.com/1/cards/${card_id}?idList=68027e5026b59f970b733488&key=${key}&token=${token}"
  echo "Moved card ${card_id} to History column"
done
'''

[tasks.deploy]
description = "Deploy crate to crates.io with value of BUMP_LEVEL"
condition = { env_set = ["BUMP_LEVEL"] }
command = "cargo"
args = ["release", "${BUMP_LEVEL}", "--execute", "--no-confirm", "--no-verify"]


[tasks.deploy-dryrun]
description = "Simulate crate deployment to crates.io with value of BUMP_LEVEL"
condition = { env_set = ["BUMP_LEVEL"] }
command = "cargo"
args = ["release", "${BUMP_LEVEL}", "--no-confirm", "--no-verify"]

[tasks.release] # META TASK
description = "Release a new crate version"
dependencies = [
  "deploy",
  "bump-trello-version",
  "rename-trello-cards",
  "archive-trello-cards",
]

[tasks.release-dryrun] # META TASK
description = "Simulate a new crate version release"
dependencies = ["deploy-dryrun"]
